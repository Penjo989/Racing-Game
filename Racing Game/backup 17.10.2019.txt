import pygame
import sys
#-- PyGame Init --#
pygame.init()
win_width=900
win_height=550
win = pygame.display.set_mode((win_width, win_height))
pygame.display.set_caption("Racing Game")
map = pygame.image.load("maps/map_1.png")
image=pygame.image.load("Car.png")
intro_bg=pygame.image.load("intro.png")
player=image
map_wide, map_length= map.get_size()
play_music=False
pygame.mixer.music.load("car.wav")
singleplayer=False
multiplayer=False
mouse=pygame.mouse.get_pos()

#-- Colors --#
red =(255,0,0)
green=(0,255,0)
blue=(0,0,255)
black=(0,0,0)
white=(255,255,255)
grey =(200,200,200)
dark_green=(0,200,0)






if play_music:
    pygame.mixer.music.play(-1)
    pygame.mixer.music.pause()

class map():
    def __init__(self, path):
        self.path = path
        self.map_wide, self.map_length= map.get_size()
class text():
    def __init__(self, msg, color, x, y, size):
        self.font=pygame.font.SysFont(None, size)
        self.msg=msg
        self.color=color
        self.x=x
        self.y=y
    def display(self):
        self.text=self.font.render(self.msg,True,self.color)
        win.blit(self.text, (self.x, self.y))



class button():
    def __init__(self, msg, color, dark, x, y, height, width, img):
        self.color=color
        self.dark=dark
        self.msg=msg
        self.x=x
        self.y=y
        self.height=height
        self.width=width
        self.img=img
    def on_but(self):
        if self.x+self.width>=mouse[0]>=self.x and self.y+self.height>=mouse[1]>=self.y:
            return True
        else:
            return False
    def display(self):
        if self.on_but() == True and self.img=="":
            pygame.draw.rect(win, (self.dark), (self.x, self.y, self.width, self.height))
        elif self.on_but() == True and self.img!="":
            path="maps/mini/"+self.img+".png"
            path=pygame.image.load(path)
            win.blit(path, (self.x, self.y))
        elif self.img=="":
            pygame.draw.rect(win, (self.color), (self.x, self.y, self.width, self.height))
        else:
            path="maps/mini/"+self.img+".png"
            path=pygame.image.load(path)
            win.blit(path, (self.x, self.y))
        if self.msg!="":
            font = pygame.font.SysFont(None , 60)
            text = font.render(self.msg, 1, black)
            win.blit(text,(self.x + (self.width / 2 - text.get_width() / 2), self.y + (self.height / 2 - text.get_height() / 2)))


#-- Intro Vars --#
button1=button("SPlayer", green, dark_green, 60,350,100,200,"")
button2=button("MPlayer", green, dark_green, 360,350,100,200, "")
button3=button("", green, dark_green, 360,350,100,200, "map_1")

text1=text("Choose A  Map", black, 100,200,60)
text2=text("Map A", black, 100,350,60)
#-- intro --#
intro= True
while intro:
    mouse=pygame.mouse.get_pos()
    pygame.time.delay(30)
    #-- Exit Button --#
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            sys.exit(0)
        if event.type==pygame.MOUSEBUTTONDOWN:
            if button1.on_but():
                singleplayer=True
            if button2.on_but():
                multiplayer=True
            if singleplayer:
                if button3.on_but():
                    print("picked the first map")

    win.blit(intro_bg ,(0, 0))
    if not singleplayer:
        if not multiplayer:
            button1.display()
            button2.display()
        else:
            pass
    else:
        text1.display()
        text2.display()
        button3.display()
    pygame.display.update()
# -- Classes --#





class car:
    def __init__(self, color, width, height):
        self.color = color
        self.width = width
        self.height = height
        self.vel=0
        self.vel_y=0
        self.vel_x=0
        self.speed=2.5
        self.col=0.08
        self.wall_bounce=0.5

class wall:
    def __init__(self,x,y,width,height,color):
        self.x=x
        self.y=y
        self.width=width
        self.height=height
        self.color=color
    def location_x(self):
        return self.x+map_width

    def location_y(self):
        return self.y+map_height




#-- Vars --#
map_height=-map_length+win_height
map_width=0
player1=car(green, 100, 100)
rotate_r =False
rotate_l =False
crashed=False
walls=[]
show_walls=False

wallA=wall(430,350,40,930,black)

walls=[wallA]
rotation=0
dir_y=100
dir_x=0
angle=5
w, h = image.get_size()


x=230
y=win_height-player1.height
times=0
pos=(x,y)


#-- Rotate Function --#
def blitRotate(surf, image, pos, originPos, angle):

    # calcaulate the axis aligned bounding box of the rotated image
    w, h       = image.get_size()
    box        = [pygame.math.Vector2(p) for p in [(0, 0), (w, 0), (w, -h), (0, -h)]]
    box_rotate = [p.rotate(angle) for p in box]
    min_box    = (min(box_rotate, key=lambda p: p[0])[0], min(box_rotate, key=lambda p: p[1])[1])
    max_box    = (max(box_rotate, key=lambda p: p[0])[0], max(box_rotate, key=lambda p: p[1])[1])

    # calculate the translation of the pivot
    pivot        = pygame.math.Vector2(originPos[0], -originPos[1])
    pivot_rotate = pivot.rotate(angle)
    pivot_move   = pivot_rotate - pivot

    # calculate the upper left origin of the rotated image
    origin = (pos[0] - originPos[0] + min_box[0] - pivot_move[0], pos[1] - originPos[1] - max_box[1] + pivot_move[1])

    # get a rotated image
    rotated_image = pygame.transform.rotate(image, angle)

    # rotate and blit the image
    surf.blit(rotated_image, origin)

def up_down():
    ret=""
    if rotation>270 or rotation<90:
        ret="UP"
    elif 90<rotation<270:
        ret="DOWN"
    return (ret)
def right_left():
    ret=''
    if rotation>180:
        ret="RIGHT"
    elif rotation<180:
        ret="LEFT"
    return ret
run=True



#-- MainLoop --#
while run:
    pygame.time.delay(30)
    #-- Exit Button --#
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False


    #-- GUi --#
    keys = pygame.key.get_pressed()




    #-- Check Calculate Speed --#
    if player1.vel>0:
        if player1.vel<1:
            player1.vel=0
        else:
            player1.vel-=player1.vel*player1.col


    elif player1.vel<0:
        if player1.vel>-1:
            player1.vel=0
        else:
            player1.vel-=player1.vel*player1.col

    if -5<player1.vel<5:
        pygame.mixer.music.pause()


    #-- Developer Keys --#
    if keys[pygame.K_EQUALS] and show_walls==False:
        show_walls=True
    elif keys[pygame.K_EQUALS] and show_walls==True:
        show_walls=False
    #-- Check If Gas is Pressed --#
    if keys[pygame.K_UP]:
        player1.vel+=player1.speed
        pygame.mixer.music.unpause()
    if keys[pygame.K_DOWN]:
        player1.vel -= player1.speed/2
        pygame.mixer.music.unpause()
    if keys[pygame.K_RIGHT]and player1.vel>5 or keys[pygame.K_RIGHT]and player1.vel<-5:

        if dir_y+angle<=100 and dir_x<0and dir_y>=0:
            dir_y+=angle
            dir_x+=angle

        elif dir_y-angle>=0 and dir_x>=0:
            dir_x+=angle
            dir_y-=angle

        elif dir_x-angle>=0:
            dir_y-=angle
            dir_x-=angle

        elif dir_y+angle<=0:
            dir_y+=angle
            dir_x-=angle
        rotate_r=True
    elif keys[pygame.K_LEFT] and  player1.vel>5 or keys[pygame.K_LEFT]and player1.vel<-5:
        if dir_y-angle>=0 and dir_x<=0and dir_y>0:
            dir_y-=angle
            dir_x-=angle

        elif dir_x+angle<=0:
            dir_y-=angle
            dir_x+=angle

        elif dir_y+angle<=0 :
            dir_y+=angle
            dir_x+=angle

        elif dir_y+angle<=100 and dir_x>=0 :
            dir_x-=angle
            dir_y+=angle
        rotate_l=True

    player1.vel_x = player1.vel * dir_x/100
    player1.vel_y=player1.vel*dir_y/100







    #-- Check What Animation To Do --#
    for wall in walls:
        if not crashed:
            if player1.vel_y>0 and y-player1.vel_y<= wall.location_y()+wall.height  and wall.location_x()<=x+0.5*player1.width<wall.location_x()+wall.width and y>wall.location_y()+wall.height:
                y+=player1.vel_y
                if -player1.vel_y < dir_x * 0.5 < player1.vel_y:
                    player1.vel *= -player1.wall_bounce
                else:
                    player1.vel /= 1.5

                crashed=True
            elif player1.vel_y<0and y-player1.vel_y+player1.height>=wall.location_y() and  wall.location_x()<=x+0.5*player1.width<wall.location_x()+wall.width and y+player1.height<wall.location_y()  :

                y+=player1.vel_y
                if player1.vel_y < dir_x * 0.5 < -player1.vel_y:
                    player1.vel *= -player1.wall_bounce
                else:
                    player1.vel /= 1.5
                crashed=True
            elif player1.vel_x>0 and x +player1.vel_x+player1.width>=wall.location_x() and wall.location_y() +wall.height > y+0.5*player1.width>wall.location_y() and x<wall.location_x():
                x-=player1.vel_x
                if -player1.vel_x < dir_y * 0.5 < player1.vel_x:
                    player1.vel *= -player1.wall_bounce
                elif dir_x!=0:
                    player1.vel /= 1.5
                crashed=True
            elif player1.vel_x<0 and x +player1.vel_x <=wall.location_x()+wall.width and wall.location_y() +wall.height > y+0.5*player1.width>wall.location_y()and x>wall.location_x() +wall.width:
                x-=player1.vel_x
                if player1.vel_x < dir_y * 0.5 < -player1.vel_x:
                    player1.vel *= -player1.wall_bounce
                else:
                    player1.vel /= 1.5
                crashed=True

    if player1.vel_y>0:
        if map_height==-map_length+win_height and y-player1.vel_y>=0.5*win_height:
            y-=player1.vel_y
        elif map_height==-map_length+win_height and y-player1.vel_y<0.5*win_height:
            map_height+=player1.vel_y-(y-0.5*win_height)
            y=0.5*win_height
        elif map_height +player1.vel_y<= 0:
            map_height+=player1.vel_y
        elif map_height +player1.vel_y> 0 and map_height<0:
            y-=player1.vel_y-(map_height)
            map_height=0
        elif y-player1.vel_y>=0:
            y-=player1.vel_y
        else:
            y=0
            if -player1.vel_y < dir_x*0.5  < player1.vel_y:
                player1.vel *= -player1.wall_bounce
            else:
                player1.vel /= 1.5
    elif player1.vel_y<0:
        if map_height==0 and y-player1.vel_y<=0.5*win_height:
            y-=player1.vel_y
        elif map_height==0 and y-player1.vel_y>0.5*win_height:
            map_height+= player1.vel_y -(y-0.5*win_height)
            y=0.5*win_height
        elif map_height +player1.vel_y>=-map_length+win_height:
            map_height+=player1.vel_y
        elif map_height +player1.vel_y<-map_length+win_height and map_height>-map_length+win_height:
            y-=player1.vel_y + 0.5*win_height-y
            map_height=-map_length+win_height
        elif y-player1.vel_y+player1.height<=win_height:
            y-=player1.vel_y
        else:
            y=win_height-player1.height
            if player1.vel_y < dir_x*0.5  < -player1.vel_y:
               player1.vel*=-player1.wall_bounce
            else:
                player1.vel/=1.5



    if player1.vel_x >0:
        if map_width==0 and x+player1.vel_x<=0.5*win_width:
            x+=player1.vel_x

        elif map_width==0 and x+player1.vel_x>0.5*win_width:
            map_width+= 0.5*win_width-x
            x+=player1.vel_x- (0.5*win_width-x)

        elif map_width -player1.vel_x >=-map_wide+win_width:
            map_width-=player1.vel_x

        elif map_width - player1.vel_x < -map_wide + win_width and map_width>-map_wide+win_width:
            x+= player1.vel_x +(-map_wide+win_width-map_width)
            map_width=-map_wide+win_width

        elif x+ player1.vel_x +player1.width <=win_width:
            x+=player1.vel_x
        else:
            x=win_width -player1.width
            if -player1.vel_x < dir_y*0.5  < player1.vel_x:
               player1.vel*=-player1.wall_bounce
            else:
                player1.vel/=1.5

    elif player1.vel_x<0:
        if map_width==-map_wide+win_width and x+player1.vel_x>=0.5*win_width:
            x+=player1.vel_x
        elif map_width==-map_wide+win_width and x-player1.vel_x<0.5*win_width:
            map_width -= player1.vel_x + x - 0.5 * win_width
            x=0.5*win_width
        elif map_width-player1.vel_x<=0:
            map_width-=player1.vel_x
        elif map_width-player1.vel_x>0 and map_width<0:
            x+=player1.vel_x -map_width
            map_width=0
        elif x+player1.vel_x>=0:
            x+=player1.vel_x
        else:
            x=0
            if player1.vel_x < dir_y*0.5  < -player1.vel_x:
               player1.vel*=-player1.wall_bounce
            else:
                player1.vel/=1.5
    if rotate_r:
        if rotation-angle*0.9<0:
            rotation=360 -angle*0.9 +rotation
        else:
            rotation-=angle*0.9
        rotate_r = False



    elif rotate_l:
        if rotation +angle*0.9>360:
            rotation=0.9*angle -360+rotation
        else:
            rotation += angle * 0.9
        rotate_l = False


    crashed=False
    #-- Screen Update --#
    #win.fill((grey))

    pos=(x+0.5*player1.width,y+0.5*player1.height)
    win.blit(map, (map_width,map_height))
    if show_walls:
        for wall in walls:
            pygame.draw.rect(win, (wall.color), (wall.location_x(), wall.location_y(), wall.width, wall.height))
    #pygame.draw.rect(win, (player1.color), (x, y, player1.width, player1.height))
    blitRotate(win, image, (pos), (w/2, h/2), rotation)
    pygame.display.update()
#-- Exit --#
pygame.quit()